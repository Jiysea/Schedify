@model ViewEventViewModel

<header class="flex items-center justify-between text-lg font-medium py-3 px-4">
    <h1 class="text-coffee-900">View Event</h1>
    <button x-on:click="viewEventModal = false"
        class="flex items-center justify-center size-8 p-1 rounded-md text-zinc-500 hover:bg-coffee-100 active:bg-coffee-200 hover:text-coffee-700 active:text-coffee-900 duration-200 ease-in-out">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" viewBox="0 0 256 256">
            <path
                d="M205.66,194.34a8,8,0,0,1-11.32,11.32L128,139.31,61.66,205.66a8,8,0,0,1-11.32-11.32L116.69,128,50.34,61.66A8,8,0,0,1,61.66,50.34L128,116.69l66.34-66.35a8,8,0,0,1,11.32,11.32L139.31,128Z">
            </path>
        </svg>
    </button>
</header>

<hr class="w-full border-coffee-100">

<main class="flex flex-col gap-10 p-6 relative">
    <div class="flex items-center justify-end gap-2 w-full">
        @if (@Model.Status == EventStatus.Draft)
        {
            <button type="button" hx-confirm="Are you sure you want to open this event?"
                class="flex flex-1 items-center justify-center p-2 text-sm font-semibold duration-200 ease-in-out rounded-md border border-coffee-700 hover:border-transparent text-coffee-700 hover:text-coffee-50 hover:bg-coffee-800 active:bg-coffee-900"
                hx-patch="/organizer/open-event/@Model.Id" hx-swap="none">
                OPEN FOR REGISTRATION
            </button>
            <button type="button"
                class="flex items-center justify-center p-2 text-sm duration-200 ease-in-out rounded-md border border-transparent text-coffee-50 bg-coffee-700 hover:bg-coffee-800 active:bg-coffee-700"
                hx-get="/organizer/show-update-event/@Model.Id" hx-swap="innerHTML" hx-target="#viewEventModalContent">
                <svg class="size-5" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor"
                    viewBox="0 0 256 256">
                    <path
                        d="M227.32,73.37,182.63,28.69a16,16,0,0,0-22.63,0L36.69,152A15.86,15.86,0,0,0,32,163.31V208a16,16,0,0,0,16,16H216a8,8,0,0,0,0-16H115.32l112-112A16,16,0,0,0,227.32,73.37ZM92.69,208H48V163.31l88-88L180.69,120ZM192,108.69,147.32,64l24-24L216,84.69Z">
                    </path>
                </svg>
            </button>
            <button type="button" hx-delete="/organizer/delete-event/@Model.Id"
                hx-confirm="Are you sure you want to delete this event?" hx-swap="none"
                class="text-center p-2 duration-200 ease-in-out rounded-md border border-transparent bg-red-700 hover:bg-red-800 active:bg-red-900 text-red-50">
                <svg class="size-5" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor"
                    viewBox="0 0 256 256">
                    <path
                        d="M216,48H40a8,8,0,0,0,0,16h8V208a16,16,0,0,0,16,16H192a16,16,0,0,0,16-16V64h8a8,8,0,0,0,0-16ZM192,208H64V64H192ZM80,24a8,8,0,0,1,8-8h80a8,8,0,0,1,0,16H88A8,8,0,0,1,80,24Z">
                    </path>
                </svg>
            </button>
        }
        else if (@Model.Status == EventStatus.Open)
        {
            <button type="button"
                class="flex flex-1 items-center justify-center p-2 text-sm font-semibold duration-200 ease-in-out rounded-md border bg-red-700 hover:bg-red-800 active:bg-red-900 text-red-50"
                hx-patch="/organizer/cancel-event/@Model.Id" hx-swap="none"
                hx-confirm="Are you sure you want to move this event back to draft?">
                CANCEL
            </button>
            <button type="button"
                class="flex flex-1 items-center justify-center p-2 text-sm font-semibold duration-200 ease-in-out rounded-md border bg-coffee-700 hover:bg-coffee-800 active:bg-coffee-900 text-coffee-50"
                hx-get="/organizer/show-postpone-event/@Model.Id" hx-swap="innerHTML" hx-target="#viewEventModalContent">
                POSTPONE
            </button>
        }
        else if (@Model.Status == EventStatus.Ongoing)
        {
            <button type="button"
                class="flex flex-1 items-center justify-center p-2 text-sm font-semibold duration-200 ease-in-out rounded-md border bg-red-700 hover:bg-red-800 active:bg-red-900 text-red-50"
                hx-patch="/organizer/cancel-event/@Model.Id" hx-swap="none"
                hx-confirm="Are you sure you want to move this event back to draft?">
                CANCEL
            </button>
            <button type="button"
                class="flex flex-1 items-center justify-center p-2 text-sm font-semibold duration-200 ease-in-out rounded-md border bg-coffee-700 hover:bg-coffee-800 active:bg-coffee-900 text-coffee-50"
                hx-get="/organizer/show-postpone-event/@Model.Id" hx-swap="innerHTML" hx-target="#viewEventModalContent">
                POSTPONE
            </button>
        }
        else if (@Model.Status == EventStatus.Completed)
        {

        }
        else if (@Model.Status == EventStatus.Cancelled)
        {

        }
        else if (@Model.Status == EventStatus.Postponed)
        {

        }
    </div>

    @* General Information *@
    <div class="relative grid grid-cols-2 gap-3 p-5 border rounded-xl border-coffee-300">
        <h3
            class="select-none flex items-center gap-2 absolute start-4 -top-3 px-2 font-medium text-sm text-pumpkin-600 bg-coffee-50">
            <svg class="size-6" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor"
                viewBox="0 0 256 256">
                <path
                    d="M88,112a8,8,0,0,1,8-8h80a8,8,0,0,1,0,16H96A8,8,0,0,1,88,112Zm8,40h80a8,8,0,0,0,0-16H96a8,8,0,0,0,0,16ZM232,64V184a24,24,0,0,1-24,24H32A24,24,0,0,1,8,184.11V88a8,8,0,0,1,16,0v96a8,8,0,0,0,16,0V64A16,16,0,0,1,56,48H216A16,16,0,0,1,232,64Zm-16,0H56V184a23.84,23.84,0,0,1-1.37,8H208a8,8,0,0,0,8-8Z">
                </path>
            </svg>
            General Information
        </h3>

        @* Event Name *@
        <div class="flex flex-col col-span-full relative">
            <p class="text-xs text-coffee-900">Event Name</p>
            <span class="p-2 text-coffee-700">
                @Model.Name
            </span>
        </div>

        @* Description *@
        <div class="flex flex-col col-span-full relative">
            <p class="text-xs text-coffee-900">Description</p>
            <span class="p-2 text-coffee-700">
                @Model.Description
            </span>
        </div>

        @* Entry Fee *@
        <div class="flex flex-col col-span-full relative">
            <p class="text-xs text-coffee-900">Entry Fee</p>
            <span class="p-2 text-coffee-700">
                @Model.EntryFee
            </span>
        </div>

        @* Status *@
        <div class="flex flex-col col-span-full relative">
            <p class="text-xs text-coffee-900">Status</p>
            <span class="p-2 font-semibold uppercase">
                @if (@Model.Status == EventStatus.Draft)
                {
                    <span class="rounded-md py-1 px-3 text-zinc-700 bg-zinc-300">
                        @Model.Status
                    </span>
                }
                else if (@Model.Status == EventStatus.Open)
                {
                    <span class="rounded-md py-1 px-3 text-yellow-700 bg-yellow-300">
                        @Model.Status
                    </span>
                }
                else if (@Model.Status == EventStatus.Ongoing)
                {
                    <span class="rounded-md py-1 px-3 text-green-700 bg-green-300">
                        @Model.Status
                    </span>
                }
                else if (@Model.Status == EventStatus.Completed)
                {
                    <span class="rounded-md py-1 px-3 text-blue-700 bg-blue-300">
                        @Model.Status
                    </span>
                }
                else if (@Model.Status == EventStatus.Cancelled)
                {
                    <span class="rounded-md py-1 px-3 text-red-700 bg-red-300">
                        @Model.Status
                    </span>
                }
                else if (@Model.Status == EventStatus.Postponed)
                {
                    <span class="rounded-md py-1 px-3 text-fuchsia-700 bg-fuchsia-300">
                        @Model.Status
                    </span>
                }
            </span>
        </div>

        @* Event Duration *@
        <div class="flex flex-col col-span-full relative">
            <p class="text-xs text-coffee-900">Event Duration</p>
            <span class="p-2 text-coffee-700">
                @Model.StartAt.ToString("MMMM dd, yyyy") - @Model.EndAt.ToString("MMMM dd, yyyy")
            </span>
        </div>
    </div>
</main>