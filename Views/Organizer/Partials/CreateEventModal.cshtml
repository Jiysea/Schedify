@model CUEventViewModel

<div x-cloak x-show="createEventModal" x-transition.opacity
    class="fixed inset-0 flex justify-center items-start bg-black/50 backdrop-blur-sm overflow-y-auto scrollbar-thin scrollbar-track-transparent scrollbar-thumb-coffee-700 z-50 p-4">

    @* White Box *@
    <div x-data x-trap.noscroll="createEventModal" @@keydown.escape="createEventModal = false;"
        @@close-modal.camel="createEventModal = false;" class="bg-coffee-50 rounded-lg shadow-lg">

        @* Top Header *@
        <header class="flex items-center justify-between text-lg font-medium py-3 px-4">
            <h1 class="text-coffee-900">Create New Event</h1>
            <button x-on:click="createEventModal = false"
                class="flex items-center justify-center size-8 p-1 rounded-md text-zinc-500 hover:bg-coffee-100 active:bg-coffee-200 hover:text-coffee-700 active:text-coffee-900 duration-200 ease-in-out">
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor"
                    viewBox="0 0 256 256">
                    <path
                        d="M205.66,194.34a8,8,0,0,1-11.32,11.32L128,139.31,61.66,205.66a8,8,0,0,1-11.32-11.32L116.69,128,50.34,61.66A8,8,0,0,1,61.66,50.34L128,116.69l66.34-66.35a8,8,0,0,1,11.32,11.32L139.31,128Z">
                    </path>
                </svg>
            </button>
        </header>

        <hr class="w-full border-coffee-100">

        <main class="">
            <form id="create-event-modal" action="post" hx-post="/organizer/create-event" hx-swap="none" hx-indicator="#create-event-loader">

                @* Body *@
                <div class="flex flex-col gap-10 px-6 py-10">

                    @* General Information *@
                    <div class="relative grid grid-cols-6 gap-3 p-5 border rounded-xl border-coffee-300">
                        <h3
                            class="select-none flex items-center gap-2 absolute start-4 -top-3 px-2 font-medium text-sm text-pumpkin-600 bg-coffee-50">
                            <svg class="size-6" xmlns="http://www.w3.org/2000/svg" width="32" height="32"
                                fill="currentColor" viewBox="0 0 256 256">
                                <path
                                    d="M88,112a8,8,0,0,1,8-8h80a8,8,0,0,1,0,16H96A8,8,0,0,1,88,112Zm8,40h80a8,8,0,0,0,0-16H96a8,8,0,0,0,0,16ZM232,64V184a24,24,0,0,1-24,24H32A24,24,0,0,1,8,184.11V88a8,8,0,0,1,16,0v96a8,8,0,0,0,16,0V64A16,16,0,0,1,56,48H216A16,16,0,0,1,232,64Zm-16,0H56V184a23.84,23.84,0,0,1-1.37,8H208a8,8,0,0,0,8-8Z">
                                </path>
                            </svg>
                            General Information
                        </h3>

                        @* Event Name *@
                        <div class="flex flex-col col-span-4 gap-1 relative">
                            <label for="name" class="text-xs text-coffee-900">Event Name</label>
                            <input type="text" autocomplete="off" maxlength="100" class="input-coffee p-2" hx-indicator="#shortname-loader"
                                hx-get="/organizer/generate-event-shortname" hx-trigger="blur" hx-target="#shortname" hx-swap="outerHTML"
                                id="name" asp-for="Name" placeholder="Type event name here" />

                            <div id="validation-Name">
                            </div>
                        </div>

                        @* Event Short Name *@
                        <div class="flex flex-col col-span-2 gap-1 relative">
                            <label for="shortname" class="text-xs text-coffee-900">Short Name</label>
                            <span class="relative">
                                @await Html.PartialAsync("~/Views/Organizer/Partials/_UpdateEventShortNamePartial.cshtml", Model)

                                <svg id="shortname-loader" class="absolute end-2 top-2 htmx-indicator size-5 animate-spin text-coffee-700" xmlns="http://www.w3.org/2000/svg"
                                    viewBox="0 0 100 100" preserveAspectRatio="xMidYMid"
                                    xmlns:xlink="http://www.w3.org/1999/xlink">
                                    <g>
                                        <circle stroke-dasharray="164.93361431346415 56.97787143782138" r="35" stroke-width="10"
                                            stroke="currentColor" fill="none" cy="50" cx="50" transform="matrix(1,0,0,1,0,0)">
                                        </circle>
                                        <g></g>
                                    </g>
                                </svg>
                            </span>

                            <div id="validation-ShortName">
                            </div>
                        </div>

                        @* Description *@
                        <div class="flex flex-col col-span-full gap-1 relative">
                            <label for="description" class="text-xs text-coffee-900">Description</label>
                            <textarea type="text" autocomplete="off" class="input-coffee p-2 scrollbar-thin"
                                maxlength="500" rows="3" id="description" style="resize: none;" asp-for="Description"
                                placeholder="Describe what kind of event this will be or how your attendees are going to enjoy this."></textarea>

                            <div id="validation-Description">
                            </div>
                        </div>

                        @* Entry Fee *@
                        <div class="flex flex-col col-span-2 gap-1 relative">
                            <label for="entryfeestring" class="text-xs text-coffee-900">Entry Fee</label>
                            <input type="text" x-mask:dynamic="$money($input)" autocomplete="off"
                                class="input-coffee p-2" id="entryfeestring" asp-for="EntryFeeString"
                                placeholder="Type fee here" />

                            <div id="validation-EntryFeeString">
                            </div>
                        </div>

                        @* Event Duration *@
                        <div class="flex flex-col col-span-4 gap-1 relative w-full">
                            <p class="text-xs text-coffee-900">Event Duration</p>
                            
                            <div class="flex flex-col gap-4 relative w-full">
                                <span class="flex items-center gap-2 w-full">
                                    <div class="flex flex-col gap-1">
                                        <div class="relative w-full">
                                            <span
                                                class="absolute start-0 top-0 p-2 rounded-l-md text-xs border border-transparent bg-coffee-500 text-coffee-100 pointer-events-none">
                                                <svg class="size-5" xmlns="http://www.w3.org/2000/svg" width="32"
                                                    height="32" fill="currentColor" viewBox="0 0 256 256">
                                                    <path
                                                        d="M136,80v43.47l36.12,21.67a8,8,0,0,1-8.24,13.72l-40-24A8,8,0,0,1,120,128V80a8,8,0,0,1,16,0Zm88-24a8,8,0,0,0-8,8V82c-6.35-7.36-12.83-14.45-20.12-21.83a96,96,0,1,0-2,137.7,8,8,0,0,0-11-11.64A80,80,0,1,1,184.54,71.4C192.68,79.64,199.81,87.58,207,96H184a8,8,0,0,0,0,16h40a8,8,0,0,0,8-8V64A8,8,0,0,0,224,56Z">
                                                    </path>
                                                </svg>
                                            </span>
                                            <input type="text" class="input-coffee ps-12 pe-2 py-2 cursor-pointer"
                                                id="startat" asp-for="StartAtString" placeholder="Select a start time" />
                                        </div>
                                        <div id="validation-StartAtString">
                                        </div>
                                    </div>
                                    <div class="relative text-coffee-500">
                                        <svg class="size-5" xmlns="http://www.w3.org/2000/svg" width="32" height="32"
                                            fill="currentColor" viewBox="0 0 256 256">
                                            <path
                                                d="M221.66,133.66l-72,72a8,8,0,0,1-11.32-11.32L196.69,136H40a8,8,0,0,1,0-16H196.69L138.34,61.66a8,8,0,0,1,11.32-11.32l72,72A8,8,0,0,1,221.66,133.66Z">
                                            </path>
                                        </svg>
                                    </div>
                                    <div class="flex flex-col gap-1">
                                        <div class="relative w-full">
                                            <span
                                                class="absolute start-0 top-0 p-2 rounded-l-md text-xs border border-transparent bg-coffee-500 text-coffee-100 pointer-events-none">
                                                <svg class="size-5" xmlns="http://www.w3.org/2000/svg" width="32"
                                                    height="32" fill="currentColor" viewBox="0 0 256 256">
                                                    <path
                                                        d="M136,80v43.47l36.12,21.67a8,8,0,0,1-8.24,13.72l-40-24A8,8,0,0,1,120,128V80a8,8,0,0,1,16,0Zm-8-48A95.44,95.44,0,0,0,60.08,60.15C52.81,67.51,46.35,74.59,40,82V64a8,8,0,0,0-16,0v40a8,8,0,0,0,8,8H72a8,8,0,0,0,0-16H49c7.15-8.42,14.27-16.35,22.39-24.57a80,80,0,1,1,1.66,114.75,8,8,0,1,0-11,11.64A96,96,0,1,0,128,32Z">
                                                    </path>
                                                </svg>
                                            </span>
                                            <input type="text" class="input-coffee ps-12 pe-2 py-2 cursor-pointer"
                                                id="endat" asp-for="EndAtString" placeholder="Select an end time" />
                                        </div>
                                        <div id="validation-EndAtString">
                                        </div>
                                    </div>
                                </span>

                                @* Time Schedule *@
                                <div class="flex flex-col col-span-3 gap-1 relative w-full">
                                    <p for="shift" class="text-xs text-coffee-700">Time Schedule</p>
                                    <span class="flex items-center gap-2 w-full">
                                        <span class="flex flex-col items-start gap-2 w-full">
                                            <input type="text" class="input-coffee p-2" id="timestartdate" asp-for="TimeStartString"
                                                placeholder="Select a start time" />
                                            <div class="absolute top-full" id="validation-TimeStartString"></div>    
                                        </span>
                                        <span class="text-coffee-700 text-xs">To</span>
                                        <span class="flex flex-col items-start gap-2 w-full">
                                            <input type="text" class="input-coffee p-2" id="timeenddate" asp-for="TimeEndString"
                                                placeholder="Select an end time" />
                                            <div class="absolute top-full" id="validation-TimeEndString"></div>
                                        </span>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @* Footer *@
                <div class="mt-4 flex items-center justify-center gap-2 w-full py-3 px-4">
                    <button type="submit"
                        class="duration-200 ease-in-out text-sm py-2 w-full font-medium text-coffee-50 bg-coffee-700 hover:bg-coffee-800 active:bg-coffee-900 rounded-md">
                        SAVE

                        <svg id="create-event-loader" class="htmx-indicator size-5 animate-spin" xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 100 100" preserveAspectRatio="xMidYMid"
                            xmlns:xlink="http://www.w3.org/1999/xlink">
                            <g>
                                <circle stroke-dasharray="164.93361431346415 56.97787143782138" r="35" stroke-width="10"
                                    stroke="currentColor" fill="none" cy="50" cx="50" transform="matrix(1,0,0,1,0,0)">
                                </circle>
                                <g></g>
                            </g>
                        </svg>
                    </button>
                </div>
            </form>
        </main>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        let startPicker = flatpickr("#startat", {
            enableTime: false,
            dateFormat: "Y-m-d",
            appendTo: document.body,
            defaultDate: new Date().fp_incr(1),
            minDate: new Date().fp_incr(1), // Tomorrow
            onChange: function (selectedDates) {
                if (selectedDates.length > 0) {
                    endPicker.set("minDate", selectedDates[0]); // Set end date min to start date
                }
            }
        });

        let endPicker = flatpickr("#endat", {
            enableTime: false,
            dateFormat: "Y-m-d",
            appendTo: document.body,
            minDate: new Date().fp_incr(1), // Tomorrow
            defaultDate: new Date().fp_incr(1), // Tomorrow
        });
    
        const timeFromInstance = flatpickr("#timestartdate", {
            enableTime: true,
            dateFormat: "h:i K",
            defaultDate: "00:00",
            noCalendar: true,
            onChange: function (selectedDates, dateStr) {
                const timeEndInstance = document.querySelector("#timeenddate")._flatpickr;
                if (timeEndInstance) {
                    let fromDate = timeFromInstance.parseDate(dateStr, "h:i K");
                    let toDate = timeEndInstance.selectedDates[0];
                    if (!toDate || fromDate >= toDate) {
                        let adjustedDate = new Date(fromDate);
                        adjustedDate.setHours(fromDate.getHours() + 1);
                        timeEndInstance.setDate(adjustedDate);
                    }
                }
            }
        });

        const timeEndInstance = flatpickr("#timeenddate", {
            enableTime: true,
            dateFormat: "h:i K",
            defaultDate: "01:00",
            noCalendar: true,
            onChange: function (selectedDates, dateStr) {
                const timeFromInstance = document.querySelector("#timestartdate")._flatpickr;
                if (timeFromInstance) {
                    let toDate = timeEndInstance.parseDate(dateStr, "h:i K");
                    let fromDate = timeFromInstance.selectedDates[0];
                    if (!fromDate || toDate <= fromDate) {
                        let adjustedDate = new Date(toDate);
                        adjustedDate.setHours(toDate.getHours() - 1);
                        timeFromInstance.setDate(adjustedDate);
                    }
                }
            }
        });
    });
</script>