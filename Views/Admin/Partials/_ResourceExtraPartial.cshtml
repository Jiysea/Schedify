@model AddResourceViewModel


@if (Model.Type == ResourceType.Venue)
{
    var venueModel = Model as VenueViewModel;

    <span class="absolute flex items-center gap-1 start-4 -top-3 text-sm font-light text-pumpkin-400 bg-charcoal-900 px-2">
        <svg class="size-4" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor"
            viewBox="0 0 256 256">
            <path
                d="M112,80a16,16,0,1,1,16,16A16,16,0,0,1,112,80ZM64,80a64,64,0,0,1,128,0c0,59.95-57.58,93.54-60,94.95a8,8,0,0,1-7.94,0C121.58,173.54,64,140,64,80Zm16,0c0,42.2,35.84,70.21,48,78.5,12.15-8.28,48-36.3,48-78.5a48,48,0,0,0-96,0Zm122.77,67.63a8,8,0,0,0-5.54,15C213.74,168.74,224,176.92,224,184c0,13.36-36.52,32-96,32s-96-18.64-96-32c0-7.08,10.26-15.26,26.77-21.36a8,8,0,0,0-5.54-15C29.22,156.49,16,169.41,16,184c0,31.18,57.71,48,112,48s112-16.82,112-48C240,169.41,226.78,156.49,202.77,147.63Z">
            </path>
        </svg>
        Venue Information
    </span>

    @* Address Line 1 *@
    <div class="flex flex-col col-span-full gap-1 relative">
        <label for="addressline1" class="text-xs text-charcoal-300">Address Line 1</label>
        <input type="text" class="input-charcoal-dark p-2" id="addressline1" asp-for="@venueModel!.AddressLine1"
            placeholder="Type address here" />
    </div>

    @* Address Line 2 *@
    <div class="flex flex-col col-span-full gap-1 relative">
        <label for="addressline2" class="text-xs text-charcoal-300">Address Line 2</label>
        <input type="text" class="input-charcoal-dark p-2" id="addressline2" asp-for="@venueModel!.AddressLine2"
            placeholder="Type address here" />
    </div>

    @* City/Municipality *@
    <div class="flex flex-col col-span-2 gap-1 relative">
        <label for="citymunicipality" class="text-xs text-charcoal-300">City/Municipality</label>
        <input disabled readonly type="text" class="input-charcoal-dark p-2" id="citymunicipality" value="Davao City" />
    </div>

    @* Province *@
    <div class="flex flex-col col-span-3 gap-1 relative">
        <label for="province" class="text-xs text-charcoal-300">Province</label>
        <input disabled readonly type="text" class="input-charcoal-dark p-2" id="province" value="Davao del Sur" />
    </div>

    @* Capacity *@
    <div class="flex flex-col gap-1 relative">
        <label for="capacity" class="text-xs text-charcoal-300">Capacity</label>
        <input type="number" inputmode="numeric" class="input-charcoal-dark p-2" id="capacity"
            asp-for="@venueModel!.Capacity" placeholder="Enter capacity here" />
    </div>

    @* Size *@
    <div class="flex flex-col col-span-3 gap-1 w-full relative">
        <label for="size" class="text-xs text-charcoal-300">Size</label>
        <input type="text" class="input-charcoal-dark p-2" id="size" asp-for="@venueModel!.Size"
            placeholder="Type size here" />
    </div>
}

else if (Model.Type == ResourceType.Equipment)
{
    var equipmentModel = Model as EquipmentViewModel;

    <span class="absolute flex items-center gap-1 start-4 -top-3 text-sm font-light text-pumpkin-400 bg-charcoal-900 px-2">
        <svg class="size-4" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor"
            viewBox="0 0 256 256">
            <path
                d="M208,136H176V104h16a16,16,0,0,0,16-16V40a16,16,0,0,0-16-16H64A16,16,0,0,0,48,40V88a16,16,0,0,0,16,16H80v32H48a16,16,0,0,0-16,16v16a16,16,0,0,0,16,16h8v40a8,8,0,0,0,16,0V184H184v40a8,8,0,0,0,16,0V184h8a16,16,0,0,0,16-16V152A16,16,0,0,0,208,136ZM64,40H192V88H64Zm32,64h64v32H96Zm112,64H48V152H208v16Z">
            </path>
        </svg>
        Equipment Information
    </span>

    @* Brand *@
    <div class="flex flex-col gap-1 relative">
        <label for="brand" class="text-xs text-charcoal-300">Brand</label>
        <input type="text" class="input-charcoal-dark p-2" id="brand" asp-for="@equipmentModel!.Brand"
            placeholder="Type brand here" />
    </div>

    @* Specifications *@
    <div class="flex flex-col col-span-3 gap-1 w-full relative" x-data="{ 
                    specs: @Json.Serialize(@equipmentModel!.Specifications ?? new Dictionary<string, string>()),
                    newKey: '',
                    newValue: '',
                }">
        <p class="text-xs text-charcoal-300">Specifications</p>

        <!-- Input Fields for Key & Value -->
        <div class="flex gap-2 mb-2">
            <input type="text" x-model="newKey" placeholder="Enter Key" class="input" />
            <input type="text" x-model="newValue" placeholder="Enter Value" class="input" />
            <button type="button" @@click="if(newKey && newValue) { specs[newKey] = newValue; newKey=''; newValue=''; }"
                class="">
                Add
            </button>
        </div>

        <!-- Toaster-style Key-Value Display -->
        <div class="mt-2 space-y-2">
            <template x-for="[key, value] in Object.entries(specs)" :key="key">
                <div class="flex justify-between bg-gray-100 p-2 rounded">
                    <span x-text="key"></span>: <span x-text="value"></span>
                    <button type="button" @@click="delete specs[key]">Remove</button>
                </div>
            </template>
        </div>

        <!-- Hidden Input for JSON Data -->
        <template x-for="[key, value] in Object.entries(specs)" :key="key">
            <input type="hidden" :name="'Specifications[' + key + ']'" :value="value" />
        </template>
    </div>
}
