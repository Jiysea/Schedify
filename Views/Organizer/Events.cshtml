@model EventsViewModel

@{
    ViewData["Title"] = "Events";
    var firstDate = new DateTime(DateTime.UtcNow.Year, 1, 1);
    var currentDate = DateTime.UtcNow;
    var firstFormatted = firstDate.ToString("MM-dd-YYYY");
    var currentFormatted = currentDate.ToString("MM-dd-YYYY");
}

<partial name="~/Views/Organizer/Partials/_SidebarPartial.cshtml" />

<div x-data="{ openChat: false, viewEventModal: false, createEventModal: false}" class="duration-500 ease-in-out min-h-screen bg-[#F9FBFA] ms-[80px] lg:ms-[250px]">
    
    @* Chat Side Bar *@
    @* @await Html.PartialAsync("~/Views/Chat/ChatSideBar.cshtml", Model.ChatViewModel) *@
    
    @* Main Header (Search & Avatar) *@
    <partial name="~/Views/Organizer/Partials/_TopbarPartial.cshtml" model="Model.AvatarFileName" />

    <header class="flex flex-col items-center w-full px-4 py-2 border-b-2 border-zinc-100">

        @* Sub Header (My Events, Date Range, Filter, & Create New Event Button) *@
        <div class="flex items-center w-full h-[8vh] gap-3">
            <div class="flex items-center gap-3">
                <span class="flex items-center justify-center bg-pumpkin-500 text-pumpkin-50 p-1 size-8 rounded-lg">
                    <svg class="" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor"
                        viewBox="0 0 256 256">
                        <path
                            d="M208,32H184V24a8,8,0,0,0-16,0v8H88V24a8,8,0,0,0-16,0v8H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM72,48v8a8,8,0,0,0,16,0V48h80v8a8,8,0,0,0,16,0V48h24V80H48V48ZM208,208H48V96H208V208Zm-64-56a16,16,0,1,1-16-16A16,16,0,0,1,144,152Z">
                        </path>
                    </svg>
                </span>
                <h2 class="font-semibold text-2xl text-coffee-900">My Events</h2>
            </div>

            @* Date Range & Filter *@
            <div class="flex items-center gap-3">
                <span class="relative">
                    <svg class="absolute top-1/2 -translate-y-1/2 end-2 size-5 pointer-events-none text-zinc-500"
                        xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor"
                        viewBox="0 0 256 256">
                        <path
                            d="M208,32H184V24a8,8,0,0,0-16,0v8H88V24a8,8,0,0,0-16,0v8H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM72,48v8a8,8,0,0,0,16,0V48h80v8a8,8,0,0,0,16,0V48h24V80H48V48ZM208,208H48V96H208V208Z">
                        </path>
                    </svg>
                    <input type="text" hx-get="/organizer/event-filter-date" hx-trigger="change"
                        hx-target="#events-list" name="startDate"
                        class="duration-200 ease-in-out appearance-none w-36 text-sm font-medium outline-none px-3 py-1 rounded-md border-2 focus:ring-0 bg-white border-zinc-300 focus:border-coffee-700 text-zinc-500 focus:text-coffee-500 selection:text-coffee-50 selection:bg-coffee-700 placeholder-zinc-500"
                        id="startDate" placeholder="Start date" />
                </span>

                <span class="relative">
                    <svg class="absolute top-1/2 -translate-y-1/2 end-2 size-5 pointer-events-none text-zinc-500"
                        xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor"
                        viewBox="0 0 256 256">
                        <path
                            d="M208,32H184V24a8,8,0,0,0-16,0v8H88V24a8,8,0,0,0-16,0v8H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM72,48v8a8,8,0,0,0,16,0V48h80v8a8,8,0,0,0,16,0V48h24V80H48V48ZM208,208H48V96H208V208Z">
                        </path>
                    </svg>
                    <input type="text" hx-get="/organizer/event-filter-date" hx-trigger="change"
                        hx-target="#events-list" name="endDate"
                        class="duration-200 ease-in-out appearance-none w-36 text-sm font-medium outline-none px-2 py-1 rounded-md border-2 focus:ring-0 bg-white border-zinc-300 focus:border-coffee-700 text-zinc-500 focus:text-coffee-500 selection:text-coffee-50 selection:bg-coffee-700 placeholder-zinc-500"
                        id="endDate" placeholder="End date" />
                </span>
            </div>

            <div class="flex flex-1 items-center justify-end">
                <button type="button" x-on:click="createEventModal = !createEventModal"
                    class="select-none duration-200 ease-in-out text-sm font-medium rounded-md flex items-center justify-center gap-2 px-3 py-1 border-2 border-transparent bg-coffee-600 hover:bg-coffee-700 active:bg-coffee-900 text-coffee-50">
                    <svg class="size-5" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor"
                        viewBox="0 0 256 256">
                        <path
                            d="M208,32H184V24a8,8,0,0,0-16,0v8H88V24a8,8,0,0,0-16,0v8H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM72,48v8a8,8,0,0,0,16,0V48h80v8a8,8,0,0,0,16,0V48h24V80H48V48ZM208,208H48V96H208V208Zm-48-56a8,8,0,0,1-8,8H136v16a8,8,0,0,1-16,0V160H104a8,8,0,0,1,0-16h16V128a8,8,0,0,1,16,0v16h16A8,8,0,0,1,160,152Z">
                        </path>
                    </svg>
                    New Event
                </button>
            </div>
        </div>
    </header>

    @* Events List Bars *@
    <main class="h-[80vh]">
        <div id="events-list"
            class="space-y-3 p-4 overflow-y-auto h-full scrollbar-thin scrollbar-track-transparent scrollbar-thumb-coffee-700">

            @await Html.PartialAsync("~/Views/Organizer/Partials/_EventsListPartial.cshtml", Model)
        </div>

        <div id="all-modals">
            @* Create Events *@ 
            @await Html.PartialAsync("~/Views/Organizer/Partials/CreateEventModal.cshtml", Model.CUEventViewModel)

            @* View, Update & Delete Events *@
            @await Html.PartialAsync("~/Views/Organizer/Partials/ViewEventModal.cshtml", Model.ViewEventViewModel)
        </div>
    </main>


</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            let startPicker = flatpickr("#startDate", {
                dateFormat: "m-d-Y",
                defaultDate: "@firstFormatted",
                onChange: function (selectedDates) {
                    if (selectedDates.length > 0) {
                        let startDate = selectedDates[0];
                        endPicker.set("minDate", startDate); // Set minDate for endDate
                    }
                }
            });

            let endPicker = flatpickr("#endDate", {
                dateFormat: "m-d-Y",
                defaultDate: "@currentFormatted",
                onChange: function (selectedDates) {
                    if (selectedDates.length > 0) {
                        let endDate = selectedDates[0];
                        startPicker.set("maxDate", endDate); // Set maxDate for startDate
                    }
                }
            });

            // Ensure initial values sync
            let startDateValue = startPicker.selectedDates[0];
            let endDateValue = endPicker.selectedDates[0];

            if (startDateValue) {
                endPicker.set("minDate", startDateValue);
            }
            if (endDateValue) {
                startPicker.set("maxDate", endDateValue);
            }
        });
    </script>

    <script>
        document.body.addEventListener("htmx:afterSwap", () => {
            // Check if the new content includes the modal
            if (event.target.id === "all-modals") {
                initializeFlatpickr(); // Reinitialize Flatpickr
            }

            function initializeFlatpickr() {
                let startPicker = flatpickr("#startat", {
                    enableTime: false,
                    dateFormat: "Y-m-d",
                    appendTo: document.body,
                    defaultDate: new Date().fp_incr(1),
                    minDate: new Date().fp_incr(1), // Tomorrow
                    onChange: function (selectedDates) {
                        if (selectedDates.length > 0) {
                            endPicker.set("minDate", selectedDates[0]); // Set end date min to start date
                        }
                    }
                });

                let endPicker = flatpickr("#endat", {
                    enableTime: false,
                    dateFormat: "Y-m-d",
                    appendTo: document.body,
                    minDate: new Date().fp_incr(1), // Tomorrow
                    defaultDate: new Date().fp_incr(1), // Tomorrow
                });

                const timeFromInstance = flatpickr("#timestartdate", {
                    enableTime: true,
                    dateFormat: "h:i K",
                    defaultDate: "00:00",
                    noCalendar: true,
                    onChange: function (selectedDates, dateStr) {
                        const timeEndInstance = document.querySelector("#timeenddate")._flatpickr;
                        if (timeEndInstance) {
                            let fromDate = timeFromInstance.parseDate(dateStr, "h:i K");
                            let toDate = timeEndInstance.selectedDates[0];
                            if (!toDate || fromDate >= toDate) {
                                let adjustedDate = new Date(fromDate);
                                adjustedDate.setHours(fromDate.getHours() + 1);
                                timeEndInstance.setDate(adjustedDate);
                            }
                        }
                    }
                });

                const timeEndInstance = flatpickr("#timeenddate", {
                    enableTime: true,
                    dateFormat: "h:i K",
                    defaultDate: "01:00",
                    noCalendar: true,
                    onChange: function (selectedDates, dateStr) {
                        const timeFromInstance = document.querySelector("#timestartdate")._flatpickr;
                        if (timeFromInstance) {
                            let toDate = timeEndInstance.parseDate(dateStr, "h:i K");
                            let fromDate = timeFromInstance.selectedDates[0];
                            if (!fromDate || toDate <= fromDate) {
                                let adjustedDate = new Date(toDate);
                                adjustedDate.setHours(toDate.getHours() - 1);
                                timeFromInstance.setDate(adjustedDate);
                            }
                        }
                    }
                });
            }
        });
    </script>
}
