@model CUResourceViewModel

@if (Model.ResourceType == ResourceType.Venue)
{
    <span class="absolute flex items-center gap-2 start-4 -top-3 text-sm font-medium text-pumpkin-600 bg-coffee-50 px-2">
        <svg class="size-5" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor"
            viewBox="0 0 256 256">
            <path
                d="M112,80a16,16,0,1,1,16,16A16,16,0,0,1,112,80ZM64,80a64,64,0,0,1,128,0c0,59.95-57.58,93.54-60,94.95a8,8,0,0,1-7.94,0C121.58,173.54,64,140,64,80Zm16,0c0,42.2,35.84,70.21,48,78.5,12.15-8.28,48-36.3,48-78.5a48,48,0,0,0-96,0Zm122.77,67.63a8,8,0,0,0-5.54,15C213.74,168.74,224,176.92,224,184c0,13.36-36.52,32-96,32s-96-18.64-96-32c0-7.08,10.26-15.26,26.77-21.36a8,8,0,0,0-5.54-15C29.22,156.49,16,169.41,16,184c0,31.18,57.71,48,112,48s112-16.82,112-48C240,169.41,226.78,156.49,202.77,147.63Z">
            </path>
        </svg>
        Venue Information
    </span>

    @* Address Line 1 *@
    <div class="flex flex-col col-span-full gap-1 relative">
        <label for="edit-addressline1" class="text-xs text-coffee-700">Address Line 1</label>
        <input type="text" class="input-coffee p-2" id="edit-addressline1" asp-for="AddressLine1"
            placeholder="Type address here" />
        <div id="edit-validation-AddressLine1">
        </div>
    </div>

    @* Address Line 2 *@
    <div class="flex flex-col col-span-full gap-1 relative">
        <label for="edit-addressline2" class="text-xs text-coffee-700">Address Line 2</label>
        <input type="text" class="input-coffee p-2" id="edit-addressline2" asp-for="AddressLine2"
            placeholder="Type address here" />
        <div id="edit-validation-AddressLine2">
        </div>
    </div>

    @* City/Municipality *@
    <div class="flex flex-col col-span-2 gap-1 relative">
        <label for="edit-citymunicipality" class="text-xs text-coffee-700">City/Municipality</label>
        <input disabled readonly type="text" class="input-coffee p-2" id="edit-citymunicipality" value="Davao City" />
    </div>

    @* Province *@
    <div class="flex flex-col col-span-3 gap-1 relative">
        <label for="edit-province" class="text-xs text-coffee-700">Province</label>
        <input disabled readonly type="text" class="input-coffee p-2" id="edit-province" value="Davao del Sur" />
    </div>

    @* Capacity *@
    <div class="flex flex-col gap-1 relative">
        <label for="edit-capacity" class="text-xs text-coffee-700">Capacity</label>
        <span class="relative">
            <input type="number" inputmode="numeric" class="input-coffee p-2" id="edit-capacity" asp-for="Capacity"
                placeholder="Enter capacity here" min="1" />
            <span
                class="pointer-events-none absolute top-0 end-0 rounded-r-md border border-transparent bg-coffee-600 text-coffee-50 text-sm px-2 py-2">
                <svg class="size-5" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor"
                    viewBox="0 0 256 256">
                    <path
                        d="M64.12,147.8a4,4,0,0,1-4,4.2H16a8,8,0,0,1-7.8-6.17,8.35,8.35,0,0,1,1.62-6.93A67.79,67.79,0,0,1,37,117.51a40,40,0,1,1,66.46-35.8,3.94,3.94,0,0,1-2.27,4.18A64.08,64.08,0,0,0,64,144C64,145.28,64,146.54,64.12,147.8Zm182-8.91A67.76,67.76,0,0,0,219,117.51a40,40,0,1,0-66.46-35.8,3.94,3.94,0,0,0,2.27,4.18A64.08,64.08,0,0,1,192,144c0,1.28,0,2.54-.12,3.8a4,4,0,0,0,4,4.2H240a8,8,0,0,0,7.8-6.17A8.33,8.33,0,0,0,246.17,138.89Zm-89,43.18a48,48,0,1,0-58.37,0A72.13,72.13,0,0,0,65.07,212,8,8,0,0,0,72,224H184a8,8,0,0,0,6.93-12A72.15,72.15,0,0,0,157.19,182.07Z">
                    </path>
                </svg>
            </span>
        </span>
        <div id="edit-validation-Capacity">
        </div>
    </div>

    @* Size *@
    <div class="flex flex-col gap-1 w-full relative">
        <label for="edit-size" class="text-xs text-coffee-700">Size</label>
        <span class="relative">
            <input type="text" x-mask:dynamic="$money($input)" class="input-coffee p-2" id="edit-size" asp-for="Size"
                placeholder="Type size here" />
            <span
                class="pointer-events-none absolute top-0 end-0 rounded-r-md border border-transparent bg-coffee-600 text-coffee-50 text-sm px-4 py-2">
                ft&sup2;
            </span>
        </span>
        <div id="edit-validation-Size"></div>
    </div>
}

else if (Model.ResourceType == ResourceType.Equipment)
{
    <span class="absolute flex items-center gap-2 start-4 -top-3 text-sm font-medium text-pumpkin-600 bg-coffee-50 px-2">
        <svg class="size-5" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor"
            viewBox="0 0 256 256">
            <path
                d="M224,64H176V56a24,24,0,0,0-24-24H104A24,24,0,0,0,80,56v8H32A16,16,0,0,0,16,80V192a16,16,0,0,0,16,16H224a16,16,0,0,0,16-16V80A16,16,0,0,0,224,64ZM96,56a8,8,0,0,1,8-8h48a8,8,0,0,1,8,8v8H96ZM224,80v32H192v-8a8,8,0,0,0-16,0v8H80v-8a8,8,0,0,0-16,0v8H32V80Zm0,112H32V128H64v8a8,8,0,0,0,16,0v-8h96v8a8,8,0,0,0,16,0v-8h32v64Z">
            </path>
        </svg>
        Equipment Information
    </span>

    @* Brand *@
    <div class="flex flex-col col-span-2 gap-1 relative">
        <label for="edit-brand" class="text-xs text-coffee-700">Brand</label>
        <input type="text" class="input-coffee p-2" id="edit-brand" asp-for="Brand" placeholder="Type brand here" />
        <div id="edit-validation-Brand">
        </div>
    </div>

    @* Warranty *@
    <div class="flex flex-col col-span-2 gap-1 relative">
        <label for="edit-warranty" class="text-xs text-coffee-700">Warranty</label>
        <span x-data="{ mask: '99' }" class="flex items-center justify-between relative gap-3">
            <input x-mask:dynamic="mask" class="input-coffee z-10 p-2" id="edit-warranty" asp-for="Warranty"
                placeholder="Type number of year or month" />
            <span class="absolute size-full rounded-md start-0 top-0 p-2 bg-coffee-500 z-0"></span>
            <select
                class="z-10 cursor-pointer px-2 py-1.5 text-sm rounded-md focus:outline-none border bg-coffee-200 border-coffee-500 text-coffee-950"
                id="edit-warrantyduration" asp-for="WarrantyDuration"
                x-on:change="
                    mask = ($event.target.value == '1') ? '99' : '999';
                ">
                <option value="1" selected>By Year</option>
                <option value="2">By Month</option>
            </select>
        </span>
        <div id="edit-validation-Warranty">
        </div>
    </div>

    @* Quantity *@
    <div class="flex flex-col gap-1 relative">
        <label for="edit-quantity" class="text-xs text-coffee-700">Quantity</label>
        <input type="number" inputmode="numeric" class="input-coffee p-2" id="edit-quantity"
            asp-for="Quantity" placeholder="Type quantity here" />
        <div id="edit-validation-Quantity">
        </div>
    </div>

    @* Specifications *@
    <div class="flex flex-col col-span-full gap-2 w-full relative"
        x-data='{ specs: @Json.Serialize(Model.Specifications), newKey: "", newValue: ""}'>

        <div class="flex items-center gap-2 w-full">
            <div class="flex flex-col gap-1 relative w-full">
                <label for="edit-specificationtype" class="text-xs text-coffee-700">Specification Type</label>
                <input type="text" class="w-full input-coffee p-2" id="edit-specificationtype" x-model="newKey"
                    placeholder="ex. Color, Battery Life, Resolution, etc." class="input" />
            </div>

            <div class="flex flex-col gap-1 relative w-full">
                <label for="edit-specificationvalue" class="text-xs text-coffee-700">Specification Value</label>
                <input type="text" class="w-full input-coffee p-2" id="edit-specificationvalue" x-model="newValue"
                    placeholder="ex. Red, 1800mAh, 1920x1080px, etc." class="input" />
            </div>
        </div>

        <div class="flex flex-col gap-1 relative mt-2">
            <button type="button" x-on:click="if(newKey && newValue) { specs[newKey] = newValue; newKey=''; newValue=''; }"
                class="duration-200 ease-in-out flex items-center justify-center gap-2 text-sm font-semibold py-2 rounded-md bg-coffee-600 hover:bg-coffee-700 active:bg-coffee-900 text-coffee-50">
                Add
            </button>
        </div>

        <!-- Toaster-style Key-Value Display -->
        <div class="flex flex-col gap-1 relative mt-2">
            <span class="text-xs text-coffee-700">Specifications Listed:</span>
            <div
                class="flex flex-wrap items-center justify-center gap-3 overflow-auto min-h-[70px] max-h-40 border border-coffee-300 rounded-md p-4 scrollbar-thin scrollbar-track-coffee-50 scrollbar-thumb-coffee-700">

                <span x-show="Object.keys(specs).length === 0" class="text-sm text-coffee-500">
                    No specifications added yet.
                </span>

                <template x-for="[key, value] in Object.entries(specs)" :key="key">
                    <div
                        class="duration-200 ease-in-out flex items-center justify-between text-sm text-coffee-700 bg-coffee-200 border border-transparent hover:border-coffee-500 px-2 py-1.5 rounded-md w-full break-words">
                        <span class="flex items-center gap-2 max-w-full">
                            <span class="font-semibold break-all" x-text="key"></span>:
                            <span class="break-words" x-text="value"></span>
                        </span>
                        <button type="button"
                            class="duration-200 ease-in-out rounded-md hover:bg-coffee-500 active:bg-coffee-700 text-coffee-900 active:text-coffee-50 p-1"
                            x-on:click="delete specs[key]">
                            <svg class="size-5" xmlns="http://www.w3.org/2000/svg" width="32" height="32"
                                fill="currentColor" viewBox="0 0 256 256">
                                <path
                                    d="M208.49,191.51a12,12,0,0,1-17,17L128,145,64.49,208.49a12,12,0,0,1-17-17L111,128,47.51,64.49a12,12,0,0,1,17-17L128,111l63.51-63.52a12,12,0,0,1,17,17L145,128Z">
                                </path>
                            </svg>
                        </button>
                    </div>
                </template>
            </div>

            <div id="edit-validation-Specifications">
            </div>
        </div>

        <!-- Hidden Input for JSON Data -->
        <template x-for="[key, value] in Object.entries(specs)" :key="key">
            <input type="hidden" :name="'Specifications[' + key + ']'" :value="value" />
        </template>
    </div>
}
else if (Model.ResourceType == ResourceType.Furniture)
{
    <span class="absolute flex items-center gap-2 start-4 -top-3 text-sm font-medium text-pumpkin-600 bg-coffee-50 px-2">
        <svg class="size-5" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor"
            viewBox="0 0 256 256">
            <path
                d="M208,136H176V104h16a16,16,0,0,0,16-16V40a16,16,0,0,0-16-16H64A16,16,0,0,0,48,40V88a16,16,0,0,0,16,16H80v32H48a16,16,0,0,0-16,16v16a16,16,0,0,0,16,16h8v40a8,8,0,0,0,16,0V184H184v40a8,8,0,0,0,16,0V184h8a16,16,0,0,0,16-16V152A16,16,0,0,0,208,136ZM64,40H192V88H64Zm32,64h64v32H96Zm112,64H48V152H208v16Z">
            </path>
        </svg>
        Furniture Information
    </span>

    <div class="flex flex-col @(Model.IsOtherMaterial ? "col-span-3" : "col-span-full") gap-1 relative">
        <label for="edit-material" class="text-xs text-coffee-700">Material</label>
        <select class="input-coffee p-2" id="edit-material" asp-for="Material" hx-get="/organizer/select-furniture-material"
            hx-target="#resource-type" hx-swap="innerHTML" hx-trigger="change"
            hx-vals='js:{"selectedOption": event.target.value}' asp-items="@(new SelectList(Model.FurnitureMaterials))">
        </select>
        <div id="edit-validation-Material">
        </div>
    </div>

    if (Model.IsOtherMaterial)
    {
        @* Other Material *@
        <div class="flex flex-col col-span-2 gap-1 relative">
            <label for="edit-othermaterial" class="text-xs text-coffee-700">Other Material</label>
            <input type="text" class="input-coffee p-2" id="edit-othermaterial" asp-for="OtherMaterial"
                placeholder="Type its specific material" />
            <div id="edit-validation-OtherMaterial">
            </div>
        </div>
    }

    @* Quantity *@
    <div class="flex flex-col col-span-2 gap-1 relative">
        <label for="edit-quantity" class="text-xs text-coffee-700">Quantity</label>
        <input type="number" inputmode="numeric" class="input-coffee p-2" id="edit-quantity"
            asp-for="Quantity" placeholder="Type quantity here" />
        <div id="edit-validation-Quantity">
        </div>
    </div>

    @* Dimensions *@
    <div class="flex flex-col col-span-3 gap-1 relative">
        <label for="edit-dimensions" class="text-xs text-coffee-700">Dimensions</label>
        <input type="text" class="input-coffee p-2" id="edit-dimensions" asp-for="Dimensions"
            placeholder="ex. 6ft x 3ft x 30in, 1920x1080px, etc." />
        <div id="edit-validation-Dimensions">
        </div>
    </div>

    @* Warranty *@
    <div class="flex flex-col col-span-3 gap-1 relative">
        <label for="edit-warranty" class="text-xs text-coffee-700">Warranty</label>
        <span x-data="{ mask: '99' }" class="flex items-center justify-between relative gap-3">
            <input x-mask:dynamic="mask" class="input-coffee z-10 p-2" id="edit-warranty" asp-for="Warranty"
                placeholder="Type number of year or month" />
            <span class="absolute size-full rounded-md start-0 top-0 p-2 bg-coffee-500 z-0"></span>
            <select
                class="z-10 cursor-pointer px-2 py-1.5 text-sm rounded-md focus:outline-none border bg-coffee-200 border-coffee-500 text-coffee-950"
                id="edit-warrantyduration" asp-for="WarrantyDuration"
                x-on:change="
                    mask = ($event.target.value == '1') ? '99' : '999';
                ">
                <option value="1" selected>By Year</option>
                <option value="2">By Month</option>
            </select>
        </span>
        <div id="edit-validation-Warranty">
        </div>
    </div>
}

else if (Model.ResourceType == ResourceType.Catering)
{
    <span class="absolute flex items-center gap-2 start-4 -top-3 text-sm font-medium text-pumpkin-600 bg-coffee-50 px-2">
        <svg class="size-5" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor"
            viewBox="0 0 256 256">
            <path
                d="M72,88V40a8,8,0,0,1,16,0V88a8,8,0,0,1-16,0ZM216,40V224a8,8,0,0,1-16,0V176H152a8,8,0,0,1-8-8,268.75,268.75,0,0,1,7.22-56.88c9.78-40.49,28.32-67.63,53.63-78.47A8,8,0,0,1,216,40ZM200,53.9c-32.17,24.57-38.47,84.42-39.7,106.1H200ZM119.89,38.69a8,8,0,1,0-15.78,2.63L112,88.63a32,32,0,0,1-64,0l7.88-47.31a8,8,0,1,0-15.78-2.63l-8,48A8.17,8.17,0,0,0,32,88a48.07,48.07,0,0,0,40,47.32V224a8,8,0,0,0,16,0V135.32A48.07,48.07,0,0,0,128,88a8.17,8.17,0,0,0-.11-1.31Z">
            </path>
        </svg>
        Catering Information
    </span>
    
    <div class="col-span-full grid grid-cols-5 gap-3"
        x-data='{ menuItems: @Json.Serialize(Model.MenuItems), newItem: "" }'>
        @* Guest Capacity *@
        <div class="flex flex-col col-span-2 gap-1 relative">
            <label for="edit-guestcapacity" class="text-xs text-coffee-700">Guest Capacity</label>
            <input type="number" inputmode="numeric" class="input-coffee p-2"
                id="edit-guestcapacity" asp-for="GuestCapacity" placeholder="Type guest capacity here" />
            <div id="edit-validation-GuestCapacity">
            </div>
        </div>

        @* Menu Items *@
        <div class="flex flex-col col-span-3 gap-1 relative">

            <label for="edit-menuitems" class="text-xs text-coffee-700">Menu Items</label>

            <div class="flex items-center gap-2">
                <input type="text" class="input-coffee p-2 w-full" id="edit-menuitems" x-model="newItem"
                    placeholder="Type menu items here" />
                <button type="button"
                    class="px-3 py-2 text-sm font-semibold bg-coffee-600 hover:bg-coffee-700 active:bg-coffee-900 text-white rounded-md"
                    x-on:click="if(newItem.trim() !== '') { menuItems.push(newItem.trim()); newItem = ''; }">
                    Add
                </button>
            </div>
        </div>

        @* List of Menu Items *@
        <div class="flex flex-col gap-1 col-span-full">
            <p class="Foods Listed:"></p>
            <div
                class="flex flex-wrap items-center justify-center col-span-full gap-3 overflow-auto min-h-[70px] max-h-40 border border-coffee-300 rounded-md p-4 scrollbar-thin scrollbar-track-coffee-50 scrollbar-thumb-coffee-700">

                <!-- Placeholder when no items exist -->
                <span x-show="menuItems.length === 0" class="text-sm text-coffee-500">
                    No menu items added yet.
                </span>

                <template x-for="(item, index) in menuItems" :key="index">
                    <div
                        class="duration-200 ease-in-out flex items-center justify-between text-sm text-coffee-700 bg-coffee-200 border border-transparent hover:border-coffee-500 px-2 py-1.5 rounded-md w-full break-words">
                        <span x-text="item"></span>
                        <button type="button" x-on:click="menuItems.splice(index, 1)"
                            class="duration-200 ease-in-out rounded-md hover:bg-coffee-500 active:bg-coffee-700 text-coffee-900 hover:text-coffee-50 active:text-coffee-50 p-1">
                            <svg class="size-5" xmlns="http://www.w3.org/2000/svg" width="32" height="32"
                                fill="currentColor" viewBox="0 0 256 256">
                                <path
                                    d="M208.49,191.51a12,12,0,0,1-17,17L128,145,64.49,208.49a12,12,0,0,1-17-17L111,128,47.51,64.49a12,12,0,0,1,17-17L128,111l63.51-63.52a12,12,0,0,1,17,17L145,128Z">
                                </path>
                            </svg>
                        </button>
                    </div>
                </template>
            </div>

            <!-- Hidden Inputs for Model Binding -->
            <template x-for="(item, index) in menuItems" :key="index">
                <input type="hidden" :name="'MenuItems[' + index + ']'" :value="item" />
            </template>
        </div>
    </div>
}

else if (Model.ResourceType == ResourceType.Personnel)
{
    <span class="absolute flex items-center gap-2 start-4 -top-3 text-sm font-medium text-pumpkin-600 bg-coffee-50 px-2">
        <svg class="size-5" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor"
            viewBox="0 0 256 256">
            <path
                d="M152,80a32,32,0,1,0-32-32A32,32,0,0,0,152,80Zm0-48a16,16,0,1,1-16,16A16,16,0,0,1,152,32Zm48,112v88a8,8,0,0,1-16,0V151.66c-25.75-2.25-34.35-15.52-42-27.36-2.85-4.39-5.56-8.57-9.13-12.19l-13.4,30.81,37.2,26.57A8,8,0,0,1,160,176v56a8,8,0,0,1-16,0V180.12l-31.07-22.2L79.34,235.19A8,8,0,0,1,72,240a7.84,7.84,0,0,1-3.19-.67,8,8,0,0,1-4.14-10.52L122.19,96.5a8,8,0,0,1,11-3.92,40.92,40.92,0,0,1,8,5.47c6.37,5.52,10.51,11.91,14.16,17.55,7.68,11.84,13.22,20.4,36.6,20.4A8,8,0,0,1,200,144ZM72,152a8,8,0,0,0,7.35-4.85l24-56a8,8,0,0,0-4.2-10.5l-28-12a8,8,0,0,0-10.5,4.2l-24,56a8,8,0,0,0,4.2,10.5l28,12A8,8,0,0,0,72,152ZM54.51,127.8,72.2,86.5l13.3,5.7L67.8,133.49Z">
            </path>
        </svg>
        Personnel Information
    </span>

    @* Position *@
    <div class="flex flex-col col-span-2 gap-1 relative">
        <label for="edit-position" class="text-xs text-coffee-700">Position</label>
        <input type="text" class="input-coffee p-2" id="edit-position" asp-for="Position"
            placeholder="Type position here" />
        <div id="edit-validation-Position">
        </div>
    </div>

    @* Shift *@
    <div class="flex flex-col col-span-3 gap-1 relative w-full">
        <p for="edit-shift" class="text-xs text-coffee-700">Shift</p>
        <span class="flex items-center gap-2 w-full">
            <span class="flex items-start gap-2 w-full">
                <label for="edit-shiftfromdate" class="text-coffee-700 text-xs">From</label>
                <input type="text" class="input-coffee p-2" id="edit-shiftfromdate" asp-for="ShiftStartString"
                    placeholder="Select a start time" />
            </span>
            <span class="flex items-start gap-2 w-full">
                <label for="edit-shifttodate" class="text-coffee-700 text-xs">To</label>
                <input type="text" class="input-coffee p-2" id="edit-shifttodate" asp-for="ShiftEndString"
                    placeholder="Select an end time" />
            </span>
        </span>
        <div id="edit-validation-Shift">
        </div>
    </div>

    @* Experience *@
    <div class="flex flex-col col-span-full gap-1 relative">
        <label for="edit-experience" class="text-xs text-coffee-700">Experience</label>
        <span x-data="{ mask: '99' }" class="relative flex items-center gap-3">
            <input x-mask:dynamic="mask" class="input-coffee p-2" id="edit-experience" asp-for="Experience"
                placeholder="Type number of year or month" />
            <select class="input-coffee p-2" id="edit-experiencetype" asp-for="ExperienceType" x-on:change="
                        mask = ($event.target.value == '1') ? '99' : '999';
                    ">
                <option value="1" selected>By Year</option>
                <option value="2">By Month</option>
            </select>
        </span>
        <div id="edit-validation-Experience">
        </div>
    </div>

    <script>
        document.addEventListener("htmx:afterSettle", () => {
            const shiftFromInstance = flatpickr("#edit-shiftfromdate", {
                enableTime: true,
                dateFormat: "h:i K",
                noCalendar: true,
                onChange: function (selectedDates, dateStr) {
                    const shiftToInstance = document.querySelector("#edit-shifttodate")._flatpickr;
                    if (shiftToInstance) {
                        let fromDate = shiftFromInstance.parseDate(dateStr, "h:i K");
                        let toDate = shiftToInstance.selectedDates[0];

                        if (!toDate || fromDate >= toDate) {
                            let adjustedDate = new Date(fromDate);
                            adjustedDate.setHours(fromDate.getHours() + 1);
                            shiftToInstance.setDate(adjustedDate);
                        }
                    }
                }
            });

            const shiftToInstance = flatpickr("#edit-shifttodate", {
                enableTime: true,
                dateFormat: "h:i K",
                noCalendar: true,
                onChange: function (selectedDates, dateStr) {
                    const shiftFromInstance = document.querySelector("#edit-shiftfromdate")._flatpickr;
                    if (shiftFromInstance) {
                        let toDate = shiftToInstance.parseDate(dateStr, "h:i K");
                        let fromDate = shiftFromInstance.selectedDates[0];

                        if (!fromDate || toDate <= fromDate) {
                            let adjustedDate = new Date(toDate);
                            adjustedDate.setHours(toDate.getHours() - 1);
                            shiftFromInstance.setDate(adjustedDate);
                        }
                    }
                }
            });
        });
    </script>
}